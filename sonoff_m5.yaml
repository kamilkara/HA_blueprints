blueprint:
  name: Sonoff M5 3-Gang Switch Controller
  description: |
    Control automations using the Sonoff M5 3-Gang smart switch.

    - Select your M5 device (optional visual aid).
    - Each gang supports ON, OFF, and TOGGLE triggers.
    - Assign individual actions to each gang and switch state.
    - Requires Sonoff LAN HACS integration.

  domain: automation
  author: Kamil Kara
  input:
    device_m5:
      name: Sonoff M5 Device
      description: Select your Sonoff M5 3-Gang device (for reference only)
      selector:
        device:
          integration: sonoff

    switch_1:
      name: Gang 1 Switch
      description: Select the first gang (switch entity)
      selector:
        entity:
          domain: switch

    switch_2:
      name: Gang 2 Switch
      description: Select the second gang (switch entity)
      selector:
        entity:
          domain: switch

    switch_3:
      name: Gang 3 Switch
      description: Select the third gang (switch entity)
      selector:
        entity:
          domain: switch

    # Switch 1 Actions
    switch_1_on:
      name: Switch 1 - Turned ON
      default: []
      selector:
        action: {}

    switch_1_off:
      name: Switch 1 - Turned OFF
      default: []
      selector:
        action: {}

    switch_1_toggle:
      name: Switch 1 - Toggled
      default: []
      selector:
        action: {}

    # Switch 2 Actions
    switch_2_on:
      name: Switch 2 - Turned ON
      default: []
      selector:
        action: {}

    switch_2_off:
      name: Switch 2 - Turned OFF
      default: []
      selector:
        action: {}

    switch_2_toggle:
      name: Switch 2 - Toggled
      default: []
      selector:
        action: {}

    # Switch 3 Actions
    switch_3_on:
      name: Switch 3 - Turned ON
      default: []
      selector:
        action: {}

    switch_3_off:
      name: Switch 3 - Turned OFF
      default: []
      selector:
        action: {}

    switch_3_toggle:
      name: Switch 3 - Toggled
      default: []
      selector:
        action: {}

    automation_mode:
      name: Automation Mode
      default: queued
      selector:
        select:
          options:
            - single
            - queued
            - restart
            - parallel

mode: !input automation_mode

trigger:
  - platform: state
    entity_id: !input switch_1
  - platform: state
    entity_id: !input switch_2
  - platform: state
    entity_id: !input switch_3

action:
  - choose:
      # Switch 1
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == (input('switch_1') | string) and trigger.to_state.state == 'on' }}"
        sequence: !input switch_1_on

      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == (input('switch_1') | string) and trigger.to_state.state == 'off' }}"
        sequence: !input switch_1_off

      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == (input('switch_1') | string) }}"
        sequence: !input switch_1_toggle

      # Switch 2
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == (input('switch_2') | string) and trigger.to_state.state == 'on' }}"
        sequence: !input switch_2_on

      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == (input('switch_2') | string) and trigger.to_state.state == 'off' }}"
        sequence: !input switch_2_off

      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == (input('switch_2') | string) }}"
        sequence: !input switch_2_toggle

      # Switch 3
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == (input('switch_3') | string) and trigger.to_state.state == 'on' }}"
        sequence: !input switch_3_on

      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == (input('switch_3') | string) and trigger.to_state.state == 'off' }}"
        sequence: !input switch_3_off

      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == (input('switch_3') | string) }}"
        sequence: !input switch_3_toggle