blueprint:
  name: Sonoff R5 Button Controller
  description: |
    Control multiple lights and switches using the Sonoff R5 buttons.
    - Each button has 3 actions: Single press, Double press, and Hold press.
    - Assign different devices or services to each action.
    - Each action can optionally have a custom automation mode.
  domain: automation
  input:
    sonoff_sensor:
      name: Sonoff R5 Sensor
      description: "Select the Sonoff R5 sensor entity"
      selector:
        entity:
          domain: sensor

    # Global Automation Mode (default for all actions unless overridden)
    global_automation_mode:
      name: Default Automation Mode
      description: "Select the default automation mode for all actions."
      default: queued
      selector:
        select:
          options:
            - "single"
            - "queued"
            - "restart"
            - "parallel"

    # Button 1
    enable_mode_button_1_single:
      name: Enable Custom Mode for Button 1 Single Press
      default: false
      selector:
        boolean:

    mode_button_1_single:
      name: Mode for Button 1 Single Press
      default: queued
      selector:
        select:
          options:
            - "single"
            - "queued"
            - "restart"
            - "parallel"

    button_1_single:
      name: Button 1 - Single Press Action
      default: []
      selector:
        action: {}

    enable_mode_button_1_double:
      name: Enable Custom Mode for Button 1 Double Press
      default: false
      selector:
        boolean:

    mode_button_1_double:
      name: Mode for Button 1 Double Press
      default: queued
      selector:
        select:
          options:
            - "single"
            - "queued"
            - "restart"
            - "parallel"

    button_1_double:
      name: Button 1 - Double Press Action
      default: []
      selector:
        action: {}

    enable_mode_button_1_hold:
      name: Enable Custom Mode for Button 1 Hold Press
      default: false
      selector:
        boolean:

    mode_button_1_hold:
      name: Mode for Button 1 Hold Press
      default: queued
      selector:
        select:
          options:
            - "single"
            - "queued"
            - "restart"
            - "parallel"

    button_1_hold:
      name: Button 1 - Hold Press Action
      default: []
      selector:
        action: {}

    # Repeat for Buttons 2-6
    enable_mode_button_2_single:
      name: Enable Custom Mode for Button 2 Single Press
      default: false
      selector:
        boolean:

    mode_button_2_single:
      name: Mode for Button 2 Single Press
      default: queued
      selector:
        select:
          options:
            - "single"
            - "queued"
            - "restart"
            - "parallel"

    button_2_single:
      name: Button 2 - Single Press Action
      default: []
      selector:
        action: {}

    enable_mode_button_2_double:
      name: Enable Custom Mode for Button 2 Double Press
      default: false
      selector:
        boolean:

    mode_button_2_double:
      name: Mode for Button 2 Double Press
      default: queued
      selector:
        select:
          options:
            - "single"
            - "queued"
            - "restart"
            - "parallel"

    button_2_double:
      name: Button 2 - Double Press Action
      default: []
      selector:
        action: {}

    enable_mode_button_2_hold:
      name: Enable Custom Mode for Button 2 Hold Press
      default: false
      selector:
        boolean:

    mode_button_2_hold:
      name: Mode for Button 2 Hold Press
      default: queued
      selector:
        select:
          options:
            - "single"
            - "queued"
            - "restart"
            - "parallel"

    button_2_hold:
      name: Button 2 - Hold Press Action
      default: []
      selector:
        action: {}

  source_url: "https://github.com/kamilkara/HA_blueprints/blob/main/blueprints/automation/sonoff_r5/sonoff_r5.yaml"

mode: !input global_automation_mode  # Default mode unless overridden

trigger:
  - platform: state
    entity_id: !input sonoff_sensor
    to:
      - "button_1_single"
      - "button_1_double"
      - "button_1_hold"
      - "button_2_single"
      - "button_2_double"
      - "button_2_hold"

action:
  - choose:
      # Button 1 - Single Press
      - conditions:
          - condition: state
            entity_id: !input sonoff_sensor
            state: "button_1_single"
        sequence:
          - if:
              - condition: template
                value_template: "{{ input.enable_mode_button_1_single }}"
            then:
              - service: automation.turn_on
                data:
                  mode: !input mode_button_1_single
            else:
              - service: automation.turn_on
                data:
                  mode: !input global_automation_mode
          - choose: !input button_1_single

      # Button 1 - Double Press
      - conditions:
          - condition: state
            entity_id: !input sonoff_sensor
            state: "button_1_double"
        sequence:
          - if:
              - condition: template
                value_template: "{{ input.enable_mode_button_1_double }}"
            then:
              - service: automation.turn_on
                data:
                  mode: !input mode_button_1_double
            else:
              - service: automation.turn_on
                data:
                  mode: !input global_automation_mode
          - choose: !input button_1_double

      # Button 1 - Hold Press
      - conditions:
          - condition: state
            entity_id: !input sonoff_sensor
            state: "button_1_hold"
        sequence:
          - if:
              - condition: template
                value_template: "{{ input.enable_mode_button_1_hold }}"
            then:
              - service: automation.turn_on
                data:
                  mode: !input mode_button_1_hold
            else:
              - service: automation.turn_on
                data:
                  mode: !input global_automation_mode
          - choose: !input button_1_hold
